using System.Collections.Generic;
using System.Linq;

namespace GiGraph.Dot.Entities.Types.Strings
{
    /// <summary>
    ///     Facilitates building an escape string with custom content formatting. The output generated by the
    ///     <see cref="ToEscapeString" /> method may be assigned for example to the label attribute of an element.
    /// </summary>
    public class DotEscapeStringBuilder
    {
        protected readonly List<DotEscapeString> _items = new List<DotEscapeString>();

        /// <summary>
        ///     Creates a new instance.
        /// </summary>
        public DotEscapeStringBuilder()
        {
        }

        /// <summary>
        ///     Creates a new instance initialized with text.
        /// </summary>
        /// <param name="text">
        ///     The text to initialize the instance with.
        /// </param>
        public DotEscapeStringBuilder(DotEscapeString text)
        {
            _items.Add(text);
        }

        /// <summary>
        ///     Appends the specified text to the instance.
        /// </summary>
        /// <param name="text">
        ///     The text to append to the instance.
        /// </param>
        public virtual DotEscapeStringBuilder Append(DotEscapeString text)
        {
            _items.Add(text);
            return this;
        }

        /// <summary>
        ///     Appends the specified escaped text to the instance (the text will not be processed further, so it should follow the escaping
        ///     rules available in the
        ///     <see href="http://www.graphviz.org/doc/info/attrs.html#k:escString">
        ///         documentation
        ///     </see>
        ///     ).
        /// </summary>
        /// <param name="escapedText">
        ///     The escaped text to append to the instance.
        /// </param>
        public virtual DotEscapeStringBuilder AppendEscaped(string escapedText)
        {
            _items.Add((DotEscapedString) escapedText);
            return this;
        }

        /// <summary>
        ///     Appends a line break to the instance.
        /// </summary>
        public virtual DotEscapeStringBuilder AppendLine()
        {
            _items.Add(DotEscapeString.LineBreak);
            return this;
        }

        /// <summary>
        ///     Appends the specified line of text to the instance.
        /// </summary>
        /// <param name="line">
        ///     The line of text to append to the instance.
        /// </param>
        public virtual DotEscapeStringBuilder AppendLine(DotEscapeString line)
        {
            _items.Add(line);
            return AppendLine();
        }

        /// <summary>
        ///     Appends the specified line of escaped text to the instance (the text will not be processed further, so it should follow the
        ///     escaping rules available in the
        ///     <see href="http://www.graphviz.org/doc/info/attrs.html#k:escString">
        ///         documentation
        ///     </see>
        ///     ).
        /// </summary>
        /// <param name="escapedLine">
        ///     The escaped line of text to append to the instance.
        /// </param>
        public virtual DotEscapeStringBuilder AppendEscapedLine(string escapedLine)
        {
            return AppendLine((DotEscapedString) escapedLine);
        }

        /// <summary>
        ///     Appends the specified line of text to the instance and marks it as left-justified (if the text contains line breaks,
        ///     justification will be applied to the last line only on graph visualization).
        /// </summary>
        /// <param name="line">
        ///     The line of text to append to the instance.
        /// </param>
        public virtual DotEscapeStringBuilder AppendLeftJustifiedLine(DotEscapeString line)
        {
            return Append(line).JustifyLeft();
        }

        /// <summary>
        ///     Appends the specified line of escaped text to the instance and marks it as left-justified (if the text contains line breaks,
        ///     justification will be applied to the last line only on graph visualization).
        /// </summary>
        /// <param name="line">
        ///     The line of text to append to the instance.
        /// </param>
        protected virtual DotEscapeStringBuilder AppendEscapedLeftJustifiedLine(string line)
        {
            return AppendEscaped(line).JustifyLeft();
        }

        /// <summary>
        ///     Appends the specified line of text to the instance and marks it as right-justified (if the text contains line breaks,
        ///     justification will be applied to the last line only on graph visualization).
        /// </summary>
        /// <param name="line">
        ///     The line of text to append to the instance.
        /// </param>
        public virtual DotEscapeStringBuilder AppendRightJustifiedLine(DotEscapeString line)
        {
            return Append(line).JustifyRight();
        }

        /// <summary>
        ///     Appends the specified line of escaped text to the instance and marks it as right-justified (if the text contains line breaks,
        ///     justification will be applied to the last line only on graph visualization).
        /// </summary>
        /// <param name="line">
        ///     The line of text to append to the instance.
        /// </param>
        public virtual DotEscapeStringBuilder AppendEscapedRightJustifiedLine(string line)
        {
            return AppendEscaped(line).JustifyRight();
        }

        /// <summary>
        ///     <para>
        ///         Causes the last line of the previously added text to be left-justified.
        ///     </para>
        ///     <para>
        ///         Note that if further text is added to the instance after the method is called, it will appear in a new line.
        ///     </para>
        /// </summary>
        public virtual DotEscapeStringBuilder JustifyLeft()
        {
            return Append(DotEscapeString.LeftJustification);
        }

        /// <summary>
        ///     <para>
        ///         Causes the last line of the previously added text to be right-justified.
        ///     </para>
        ///     <para>
        ///         Note that if further text is added to the instance after the method is called, it will appear in a new line.
        ///     </para>
        /// </summary>
        public virtual DotEscapeStringBuilder JustifyRight()
        {
            return Append(DotEscapeString.RightJustification);
        }

        /// <summary>
        ///     Appends a placeholder that will be replaced with the label of the current object when the graph is visualized.
        /// </summary>
        public virtual DotEscapeStringBuilder AppendLabel()
        {
            return Append(DotEscapeString.Label);
        }

        /// <summary>
        ///     Appends a placeholder that will be replaced with the identifier of the graph when the graph is visualized.
        /// </summary>
        public virtual DotEscapeStringBuilder AppendGraphId()
        {
            return Append(DotEscapeString.GraphId);
        }

        /// <summary>
        ///     Appends a placeholder that will be replaced with the definition of the edge when the graph is visualized. Applicable to edges
        ///     only.
        /// </summary>
        public virtual DotEscapeStringBuilder AppendEdgeDefinition()
        {
            return Append(DotEscapeString.EdgeDefinition);
        }

        /// <summary>
        ///     Appends a placeholder that will be replaced with the identifier of the tail node of the edge when the graph is visualized.
        ///     Applicable to edges only.
        /// </summary>
        public virtual DotEscapeStringBuilder AppendEdgeTailNodeId()
        {
            return Append(DotEscapeString.EdgeTailNodeId);
        }

        /// <summary>
        ///     Appends a placeholder that will be replaced with the identifier of the head node of the edge when the graph is visualized.
        ///     Applicable to edges only.
        /// </summary>
        public virtual DotEscapeStringBuilder AppendEdgeHeadNodeId()
        {
            return Append(DotEscapeString.EdgeHeadNodeId);
        }

        /// <summary>
        ///     Appends a placeholder that will be replaced with the identifier of the node when the graph is visualized. Applicable to nodes
        ///     only.
        /// </summary>
        public virtual DotEscapeStringBuilder AppendNodeId()
        {
            return Append(DotEscapeString.NodeId);
        }

        public override string ToString()
        {
            return string.Join(string.Empty, _items.Select(item => item?.ToString()));
        }

        /// <summary>
        ///     Returns the content of the current instance as a concatenated escape string.
        /// </summary>
        public virtual DotEscapeString ToEscapeString()
        {
            return new DotConcatenatedEscapeString(_items.ToArray());
        }
    }
}