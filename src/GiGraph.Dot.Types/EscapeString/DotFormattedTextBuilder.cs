using System.Collections.Generic;

namespace GiGraph.Dot.Types.EscapeString
{
    /// <summary>
    ///     Facilitates building text with escape sequences that format its lines or hold a place for identifiers filled in on graph
    ///     visualization. The output generated by the <see cref="Build" /> method may be assigned to a label attribute of an element or
    ///     to any <see cref="DotEscapeString" /> type attributes.
    /// </summary>
    public class DotFormattedTextBuilder
    {
        protected readonly List<DotEscapeString> _items = new();

        /// <summary>
        ///     Creates a new instance.
        /// </summary>
        public DotFormattedTextBuilder()
        {
        }

        /// <summary>
        ///     Creates a new instance initialized with text.
        /// </summary>
        /// <param name="text">
        ///     The text to initialize the instance with.
        /// </param>
        public DotFormattedTextBuilder(DotEscapeString text)
        {
            _items.Add(text);
        }

        /// <summary>
        ///     Gets the number of items in this builder.
        /// </summary>
        public virtual int Count => _items.Count;

        /// <summary>
        ///     Appends the specified text to the instance.
        /// </summary>
        /// <param name="text">
        ///     The text to append to the instance.
        /// </param>
        public virtual DotFormattedTextBuilder Append(DotEscapeString text)
        {
            _items.Add(text);
            return this;
        }

        /// <summary>
        ///     Appends a line break to the instance.
        /// </summary>
        public virtual DotFormattedTextBuilder AppendLine()
        {
            _items.Add(DotEscapeString.LineBreak);
            return this;
        }

        /// <summary>
        ///     Appends the specified line of text to the instance.
        /// </summary>
        /// <param name="line">
        ///     The line of text to append to the instance.
        /// </param>
        public virtual DotFormattedTextBuilder AppendLine(DotEscapeString line)
        {
            _items.Add(line);
            return AppendLine();
        }

        /// <summary>
        ///     Appends the specified line of text to the instance and marks it as left-justified (if the text contains line breaks,
        ///     justification will be applied to the last line only on graph visualization).
        /// </summary>
        /// <param name="line">
        ///     The line of text to append to the instance.
        /// </param>
        public virtual DotFormattedTextBuilder AppendLeftJustifiedLine(DotEscapeString line)
        {
            return Append(line).LeftJustifyLine();
        }

        /// <summary>
        ///     Appends the specified line of text to the instance and marks it as right-justified (if the text contains line breaks,
        ///     justification will be applied to the last line only on graph visualization).
        /// </summary>
        /// <param name="line">
        ///     The line of text to append to the instance.
        /// </param>
        public virtual DotFormattedTextBuilder AppendRightJustifiedLine(DotEscapeString line)
        {
            return Append(line).RightJustifyLine();
        }

        /// <summary>
        ///     <para>
        ///         Causes the preceding line of text to be left-justified.
        ///     </para>
        ///     <para>
        ///         Note that if further text is added to the instance after the method is called, it will appear in a new line.
        ///     </para>
        /// </summary>
        public virtual DotFormattedTextBuilder LeftJustifyLine()
        {
            return Append(DotEscapeString.LeftJustification);
        }

        /// <summary>
        ///     <para>
        ///         Causes the preceding line of text to be right-justified.
        ///     </para>
        ///     <para>
        ///         Note that if further text is added to the instance after the method is called, it will appear in a new line.
        ///     </para>
        /// </summary>
        public virtual DotFormattedTextBuilder RightJustifyLine()
        {
            return Append(DotEscapeString.RightJustification);
        }

        /// <summary>
        ///     Appends a placeholder replaced with the label of the current object when the graph is visualized.
        /// </summary>
        public virtual DotFormattedTextBuilder AppendLabel()
        {
            return Append(DotEscapeString.Label);
        }

        /// <summary>
        ///     Appends a placeholder replaced with the identifier of the graph when the graph is visualized.
        /// </summary>
        public virtual DotFormattedTextBuilder AppendGraphId()
        {
            return Append(DotEscapeString.GraphId);
        }

        /// <summary>
        ///     Appends a placeholder replaced with the definition of the current edge when the graph is visualized. Applicable to edges
        ///     only.
        /// </summary>
        public virtual DotFormattedTextBuilder AppendEdgeDefinition()
        {
            return Append(DotEscapeString.EdgeDefinition);
        }

        /// <summary>
        ///     Appends a placeholder replaced with the identifier of the tail node of the current edge when the graph is visualized.
        ///     Applicable to edges only.
        /// </summary>
        public virtual DotFormattedTextBuilder AppendTailNodeId()
        {
            return Append(DotEscapeString.TailNodeId);
        }

        /// <summary>
        ///     Appends a placeholder replaced with the identifier of the head node of the current edge when the graph is visualized.
        ///     Applicable to edges only.
        /// </summary>
        public virtual DotFormattedTextBuilder AppendHeadNodeId()
        {
            return Append(DotEscapeString.HeadNodeId);
        }

        /// <summary>
        ///     Appends a placeholder replaced with the identifier of the current node when the graph is visualized. Applicable to nodes
        ///     only.
        /// </summary>
        public virtual DotFormattedTextBuilder AppendNodeId()
        {
            return Append(DotEscapeString.NodeId);
        }

        /// <summary>
        ///     Returns content as a concatenated string.
        /// </summary>
        public override string ToString()
        {
            return Build().ToString();
        }

        /// <summary>
        ///     Returns content as formatted text that can be used as a label of an element.
        /// </summary>
        public virtual DotEscapeString Build()
        {
            return new DotConcatenatedEscapeString(_items.ToArray());
        }
    }
}